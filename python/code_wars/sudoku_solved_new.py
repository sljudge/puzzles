from collections import Counter

loc = [     ['a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8'],
            ['b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8'],
            ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8'],
            ['d0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8'],
            ['e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8'],
            ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8'],
            ['g0', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8'],
            ['h0', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8'],
            ['i0', 'i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7', 'i8']  ]
column = [  ['a0', 'b0', 'c0', 'd0', 'e0', 'f0', 'g0', 'h0', 'i0'],
            ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', 'i1'],
            ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2'],
            ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'i3'],
            ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'i4'],
            ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'i5'],
            ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'i5'],
            ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'i6'],
            ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'i7'],
            ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'i8']  ]
box = [     ['a0', 'a1', 'a2', 'b0', 'b1', 'b2', 'c0', 'c1', 'c2'],
            ['a3', 'a4', 'a5', 'b3', 'b4', 'b5', 'c3', 'c4', 'c5'],
            ['a6', 'a7', 'a8', 'b6', 'b7', 'b8', 'c6', 'c7', 'c8'],
            ['d0', 'd1', 'd2', 'e0', 'e1', 'e2', 'f0', 'f1', 'f2'],
            ['d3', 'd4', 'd5', 'e3', 'e4', 'e5', 'f3', 'f4', 'f5'],
            ['d6', 'd7', 'd8', 'e6', 'e7', 'e8', 'f6', 'f7', 'f8'],
            ['g0', 'g1', 'g2', 'h0', 'h1', 'h2', 'i0', 'i1', 'i2'],
            ['g3', 'g4', 'g5', 'h3', 'h4', 'h5', 'i3', 'i4', 'i5'],
            ['g6', 'g7', 'g8', 'h6', 'h7', 'h8', 'i6', 'i7', 'i8']  ]


def solved(board, loc, column, box):
    """Check whether a Sudoku puzzle is completed correctly where board is a dictionary"""
    print(board)
    def check(board, item):
        for i in range(1,10):
            for object in item:
                x = []
                for pos in object:
                    x.append(board[pos][0])
                if sorted(x) != [1,2,3,4,5,6,7,8,9]:
                    return False
        return True

    if check(board, loc) and check(board, column) and check(board, box):
        return True
    else:
        return False


# board = create_board(data, loc)
board = {'a0': [5, [5, 3, 4, 6, 7, 8, 9, 2, 1], []], 'a1': [3, [3, 5, 6, 7, 8, 9, 2, 1, 4], []], 'a2': [4, [3, 5, 6, 7, 8, 9, 1, 2, 4], [2, 4]], 'a3': [6, [1, 3, 4, 5, 7, 8, 9, 2, 6], [2, 6]], 'a4': [7, [7, 1, 2, 3, 5, 6, 8, 9, 4], []], 'a5': [8, [1, 3, 5, 7, 9, 4, 2, 6, 8], [6, 8]], 'a6': [9, [2, 3, 5, 6, 7, 1, 8, 4, 9], [4, 9]], 'a7': [1, [3, 5, 6, 7, 8, 9, 2, 4, 1], [1, 4]], 'a8': [2, [1, 3, 5, 6, 7, 9, 4, 8, 2], [2, 8]], 'b0': [6, [6, 1, 3, 4, 5, 7, 8, 9, 2], []], 'b1': [7, [1, 3, 5, 6, 8, 9, 2, 4, 7], [4, 7]], 'b2': [2, [1, 3, 5, 6, 8, 9, 7, 4, 2], [2, 4]], 'b3': [1, [1, 4, 5, 6, 7, 8, 9, 2, 3], []], 'b4': [9, [9, 1, 2, 5, 6, 7, 8, 3, 4], []], 'b5': [5, [5, 1, 3, 6, 7, 9, 4, 2, 8], []], 'b6': [3, [1, 2, 5, 6, 9, 7, 4, 8, 3], [3, 8]], 'b7': [4, [1, 5, 6, 7, 8, 9, 3, 2, 4], [2, 4]], 'b8': [8, [1, 3, 5, 6, 9, 4, 7, 2, 8], [2, 8]], 'c0': [1, [3, 4, 5, 6, 7, 8, 9, 2, 1], [1, 2]], 'c1': [9, [9, 3, 5, 6, 8, 2, 1, 4, 7], []], 'c2': [8, [8, 3, 5, 6, 9, 7, 1, 4, 2], []], 'c3': [3, [1, 4, 5, 6, 7, 8, 9, 2, 3], [2, 3]], 'c4': [4, [1, 2, 5, 6, 7, 8, 9, 3, 4], [3, 4]], 'c5': [2, [1, 3, 5, 6, 7, 8, 9, 4, 2], [2, 4]], 'c6': [5, [2, 6, 8, 9, 1, 4, 7, 3, 5], [3, 5]], 'c7': [6, [6, 7, 8, 9, 3, 1, 4, 2, 5], []], 'c8': [7, [1, 3, 5, 6, 8, 9, 4, 2, 7], [2, 7]], 'd0': [8, [8, 3, 4, 5, 6, 7, 2, 1, 9], []], 'd1': [5, [3, 4, 6, 7, 8, 9, 2, 1, 5], [1, 5]], 'd2': [9, [3, 4, 6, 7, 8, 2, 1, 5, 9], [5, 9]], 'd3': [7, [1, 2, 3, 4, 6, 8, 5, 9, 7], [7, 9]], 'd4': [6, [6, 1, 2, 3, 7, 8, 9, 5, 4], []], 'd5': [1, [2, 3, 5, 6, 8, 9, 7, 4, 1], [1, 4]], 'd6': [4, [1, 2, 3, 6, 8, 7, 9, 5, 4], [4, 5]], 'd7': [2, [1, 3, 6, 7, 8, 9, 4, 5, 2], [2, 5]], 'd8': [3, [3, 1, 5, 6, 8, 9, 4, 7, 2], []], 'e0': [4, [4, 1, 3, 5, 6, 7, 8, 2, 9], []], 'e1': [2, [1, 3, 4, 6, 7, 8, 9, 5, 2], [2, 5]], 'e2': [6, [1, 3, 4, 7, 8, 5, 2, 9, 6], [6, 9]], 'e3': [8, [8, 1, 2, 3, 4, 6, 5, 9, 7], []], 'e4': [5, [1, 2, 3, 4, 6, 7, 8, 9, 5], [5, 9]], 'e5': [3, [3, 1, 2, 4, 5, 6, 8, 9, 7], []], 'e6': [7, [1, 2, 3, 4, 6, 8, 5, 9, 7], [7, 9]], 'e7': [9, [1, 3, 4, 6, 7, 8, 5, 2, 9], [2, 9]], 'e8': [1, [1, 3, 4, 5, 6, 8, 9, 2, 7], []], 'f0': [7, [7, 2, 4, 5, 6, 8, 9, 3, 1], []], 'f1': [1, [2, 3, 4, 6, 7, 8, 9, 5, 1], [1, 5]], 'f2': [3, [2, 4, 6, 7, 8, 9, 1, 5, 3], [3, 5]], 'f3': [9, [1, 2, 3, 4, 6, 7, 8, 5, 9], [5, 9]], 'f4': [2, [2, 1, 3, 6, 7, 8, 9, 5, 4], []], 'f5': [4, [2, 3, 5, 6, 7, 8, 9, 1, 4], [1, 4]], 'f6': [8, [1, 2, 3, 6, 7, 9, 5, 4, 8], [4, 8]], 'f7': [5, [1, 2, 3, 6, 7, 8, 9, 4, 5], [4, 5]], 'f8': [6, [6, 1, 2, 3, 5, 7, 9, 4, 8], []], 'g0': [9, [2, 4, 5, 6, 7, 8, 3, 1, 9], [1, 9]], 'g1': [6, [6, 2, 3, 8, 9, 4, 7, 5, 1], []], 'g2': [1, [2, 6, 8, 4, 7, 3, 5, 9, 1], [1, 9]], 'g3': [5, [1, 2, 4, 6, 8, 9, 7, 3, 5], [3, 5]], 'g4': [3, [1, 2, 4, 6, 7, 8, 9, 5, 3], [3, 5]], 'g5': [7, [1, 2, 3, 4, 5, 6, 8, 9, 7], [7, 9]], 'g6': [2, [2, 5, 6, 7, 8, 9, 3, 4, 1], []], 'g7': [8, [8, 2, 5, 6, 7, 9, 3, 4, 1], []], 'g8': [4, [1, 2, 3, 5, 6, 7, 8, 9, 4], [4, 9]], 'h0': [2, [1, 4, 5, 6, 7, 8, 9, 3, 2], [2, 3]], 'h1': [8, [1, 3, 4, 5, 6, 9, 2, 7, 8], [7, 8]], 'h2': [7, [1, 4, 5, 6, 8, 9, 3, 2, 7], [2, 7]], 'h3': [4, [4, 1, 5, 8, 9, 3, 6, 7, 2], []], 'h4': [1, [1, 2, 4, 5, 6, 7, 8, 9, 3], []], 'h5': [9, [9, 1, 3, 4, 5, 8, 6, 7, 2], []], 'h6': [6, [1, 2, 4, 5, 7, 8, 9, 3, 6], [3, 6]], 'h7': [3, [1, 2, 4, 5, 6, 7, 8, 9, 3], [3, 9]], 'h8': [5, [5, 1, 2, 3, 4, 6, 7, 8, 9], []], 'i0': [3, [4, 5, 6, 7, 8, 9, 1, 2, 3], []], 'i1': [4, [3, 6, 7, 8, 9, 1, 2, 5, 4], [4, 5]], 'i2': [5, [6, 7, 8, 9, 1, 2, 3, 4, 5], [4, 5]], 'i3': [2, [1, 4, 7, 8, 9, 3, 5, 6, 2], [2, 6]], 'i4': [8, [8, 1, 2, 4, 6, 7, 9, 5, 3], []], 'i5': [6, [1, 3, 4, 5, 7, 8, 9, 2, 6], [2, 6]], 'i6': [1, [2, 5, 7, 8, 9, 3, 4, 6, 1], [1, 6]], 'i7': [7, [7, 2, 5, 6, 8, 9, 3, 4, 1], []], 'i8': [9, [9, 1, 2, 3, 5, 6, 7, 8, 4], []]}

print(solved(board, loc, column, box))




# test.assert_equals(done_or_not([[1, 3, 2, 5, 7, 9, 4, 6, 8]
#                         ,[4, 9, 8, 2, 6, 1, 3, 7, 5]
#                         ,[7, 5, 6, 3, 8, 4, 2, 1, 9]
#                         ,[6, 4, 3, 1, 5, 8, 7, 9, 2]
#                         ,[5, 2, 1, 7, 9, 3, 8, 4, 6]
#                         ,[9, 8, 7, 4, 2, 6, 5, 3, 1]
#                         ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
#                         ,[3, 6, 5, 8, 1, 7, 9, 2, 4]
#                         ,[8, 7, 9, 6, 4, 2, 1, 5, 3]]), 'Finished!');
#
# test.assert_equals(done_or_not([[1, 3, 2, 5, 7, 9, 4, 6, 8]
#                         ,[4, 9, 8, 2, 6, 1, 3, 7, 5]
#                         ,[7, 5, 6, 3, 8, 4, 2, 1, 9]
#                         ,[6, 4, 3, 1, 5, 8, 7, 9, 2]
#                         ,[5, 2, 1, 7, 9, 3, 8, 4, 6]
#                         ,[9, 8, 7, 4, 2, 6, 5, 3, 1]
#                         ,[2, 1, 4, 9, 3, 5, 6, 8, 7]
#                         ,[3, 6, 5, 8, 1, 7, 9, 2, 4]
#                         ,[8, 7, 9, 6, 4, 2, 1, 3, 5]]), 'Try again!');
